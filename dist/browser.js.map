{"mappings":"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","sources":["node_modules/escape-string-regexp/index.js","src/bttv.js","src/emotes.js","src/pronouns.js","src/index.js"],"sourcesContent":["export default function escapeStringRegexp(string) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// Escape characters with special meaning either inside or outside character sets.\n\t// Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\treturn string\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n\t\t.replace(/-/g, '\\\\x2d');\n}\n","let userId;\nlet bttvGlobalLookupTable;\nlet bttvChannelLookupTable;\nlet ffzChannelLookupTable;\n\nasync function getUserId() {\n  if (userId) return userId;\n\n  const queryParameters = new URLSearchParams(window.location.search);\n  const channelName = queryParameters.get(\"channel\");\n\n  const userIdResponse = await fetch(\n    `https://decapi.me/twitch/id/${channelName}`\n  );\n\n  userId = await userIdResponse.text();\n\n  return userId;\n}\n\nasync function getBttvGlobalLookupTable() {\n  if (bttvGlobalLookupTable) return bttvGlobalLookupTable;\n\n  const bttvGlobalEmotesResponse = await fetch(\n    \"https://api.betterttv.net/3/cached/emotes/global\"\n  );\n\n  const bttvGlobalEmotes = await bttvGlobalEmotesResponse.json();\n\n  bttvGlobalLookupTable = bttvGlobalEmotes.reduce((result, emote) => {\n    const emoteData = {\n      id: emote.id,\n      type: emote.imageType,\n    };\n\n    result[emote.code] = emoteData;\n\n    return result;\n  }, {});\n\n  return bttvGlobalLookupTable;\n}\n\nasync function getBttvChannelLookupTable() {\n  if (bttvChannelLookupTable) return bttvChannelLookupTable;\n\n  const userId = await getUserId();\n\n  const bttvChannelEmotesResponse = await fetch(\n    `https://api.betterttv.net/3/cached/users/twitch/${userId}`\n  );\n\n  const bttvChannelEmotesJSON = await bttvChannelEmotesResponse.json();\n  const bttvChannelEmotes = bttvChannelEmotesJSON.channelEmotes.concat(\n    bttvChannelEmotesJSON.sharedEmotes\n  );\n\n  bttvChannelLookupTable = bttvChannelEmotes.reduce((result, emote) => {\n    const emoteData = {\n      id: emote.id,\n      type: emote.imageType,\n    };\n\n    result[emote.code] = emoteData;\n\n    return result;\n  }, {});\n\n  return bttvChannelLookupTable;\n}\n\nasync function getFfzChannelLookupTable() {\n  if (ffzChannelLookupTable) return ffzChannelLookupTable;\n\n  const userId = await getUserId();\n\n  const ffzChannelEmotesResponse = await fetch(\n    `https://api.betterttv.net/3/cached/frankerfacez/users/twitch/${userId}`\n  );\n\n  const ffzChannelEmotes = await ffzChannelEmotesResponse.json();\n\n  ffzChannelLookupTable = ffzChannelEmotes.reduce((result, emote) => {\n    const emoteData = {\n      id: emote.id,\n      type: emote.imageType,\n    };\n\n    result[emote.code] = emoteData;\n\n    return result;\n  }, {});\n\n  return ffzChannelLookupTable;\n}\n\nexport default {\n  getBttvGlobalLookupTable,\n  getBttvChannelLookupTable,\n  getFfzChannelLookupTable,\n};\n","import escapeStringRegexp from \"escape-string-regexp\";\nimport bttv from \"./bttv.js\";\n\nconst TWITCH_URL_PREFIX = `https://static-cdn.jtvnw.net/emoticons/v2`;\nconst EMOTE_REGEX_PART_1 = \"(?:^|(?<=\\\\s))\";\nconst EMOTE_REGEX_PART_2 = \"(?:(?=\\\\s)|$)\";\n\nconst BTTV_URL_PREFIX = \"https://cdn.betterttv.net/emote\";\nconst FFZ_URL_PREFIX = \"https://cdn.betterttv.net/frankerfacez_emote\";\n\n/*\n  This function takes the Twitch message's `emotes` data to inject\n  one `<img>` tag per emote into the message that.\n\n  For example for this emotes object...\n\n  {\n    \"9080864508308403\": \"2-4\",\n    \"1010283120381084\": \"70-72\",\n  }\n\n  ...this means that characters 2-4 in the message string need\n  to be replaced with an `<img>` tag which has an URL to the image\n  for the emote with the ID 9080864508308403.\n*/\nconst replaceTwitchStandardEmotes = (message, emotes) => {\n  // Twitch didn't recognize any emotes in the message.\n  // So we just return the original message.\n  if (!emotes) return message;\n\n  let result = message;\n  const replacementMap = {};\n\n  for (const [emoteId, occurenceIndices] of Object.entries(emotes)) {\n    const [startIndex, endIndex] = occurenceIndices[0].split(\"-\");\n\n    const emoteText = message.slice(Number(startIndex), Number(endIndex) + 1);\n\n    replacementMap[\n      emoteText\n    ] = `<img src=\"${TWITCH_URL_PREFIX}/${emoteId}/default/light/2.0\" alt=\"emote\" />`;\n  }\n\n  for (const [emoteText, replacement] of Object.entries(replacementMap)) {\n    const emotePattern = new RegExp(\n      `${EMOTE_REGEX_PART_1}${escapeStringRegexp(\n        emoteText\n      )}${EMOTE_REGEX_PART_2}`,\n      \"g\"\n    );\n\n    result = result.replaceAll(emotePattern, replacement);\n  }\n\n  return result;\n};\n\n/*\n  This function scans the message text for occurences of bttv emote codes.\n\n  It uses the global bttv emotes list and for each emote code (e.g. SourPls),\n  it replaces that code with an `<img>` tag with the URL to that bttv emote.\n*/\nconst replaceBTTVGlobalEmotes = async (message) => {\n  const bttvGlobalLookupTable = await bttv.getBttvGlobalLookupTable();\n  const bttvGlobalEmoteCodes = Object.keys(bttvGlobalLookupTable);\n\n  // Check if there are any global emote codes found in the message...\n  const noGlobalEmoteCodeFound = bttvGlobalEmoteCodes.every(\n    (emoteCode) => !message.includes(emoteCode)\n  );\n\n  // ... and if not just return the original message\n  if (noGlobalEmoteCodeFound) return message;\n\n  // Else do the work: Go through each code and if you find it replace it respectively.\n  let result = message;\n  bttvGlobalEmoteCodes.forEach((emoteCode) => {\n    const escapedEmoteCode = escapeStringRegexp(emoteCode);\n    const emoteRegexp = new RegExp(`\\\\b${escapedEmoteCode}\\\\b`, \"g\");\n\n    result = result.replaceAll(emoteRegexp, (matchedEmoteCode) => {\n      const emoteId = bttvGlobalLookupTable[matchedEmoteCode].id;\n      return `<img src=\"${BTTV_URL_PREFIX}/${emoteId}/2x\" />`;\n    });\n  });\n\n  return result;\n};\n\nconst replaceBTTVChannelEmotes = async (message) => {\n  const bttvChannelLookupTable = await bttv.getBttvChannelLookupTable();\n  const bttvChannelEmoteCodes = Object.keys(bttvChannelLookupTable);\n\n  // Check if there are any channel emote codes found in the message...\n  const noChannelEmoteCodeFound = bttvChannelEmoteCodes.every(\n    (emoteCode) => !message.includes(emoteCode)\n  );\n\n  // ... and if not just return the original message\n  if (noChannelEmoteCodeFound) return message;\n\n  // Else do the work: Go through each code and if you find it replace it respectively.\n  let result = message;\n  bttvChannelEmoteCodes.forEach((emoteCode) => {\n    const escapedEmoteCode = escapeStringRegexp(emoteCode);\n    const emoteRegexp = new RegExp(`\\\\b${escapedEmoteCode}\\\\b`, \"g\");\n\n    result = result.replaceAll(emoteRegexp, (matchedEmoteCode) => {\n      const emoteId = bttvChannelLookupTable[matchedEmoteCode].id;\n      return `<img src=\"${BTTV_URL_PREFIX}/${emoteId}/2x\" />`;\n    });\n  });\n\n  return result;\n};\n\nconst replaceFFZChannelEmotes = async (message) => {\n  const ffzChannelLookupTable = await bttv.getFfzChannelLookupTable();\n  const ffzChannelEmoteCodes = Object.keys(ffzChannelLookupTable);\n\n  // Check if there are any channel emote codes found in the message...\n  const noChannelEmoteCodeFound = ffzChannelEmoteCodes.every(\n    (emoteCode) => !message.includes(emoteCode)\n  );\n\n  // ... and if not just return the original message\n  if (noChannelEmoteCodeFound) return message;\n\n  // Else do the work: Go through each code and if you find it replace it respectively.\n  let result = message;\n  ffzChannelEmoteCodes.forEach((emoteCode) => {\n    const escapedEmoteCode = escapeStringRegexp(emoteCode);\n    const emoteRegexp = new RegExp(`\\\\b${escapedEmoteCode}\\\\b`, \"g\");\n\n    result = result.replaceAll(emoteRegexp, (matchedEmoteCode) => {\n      const emoteId = ffzChannelLookupTable[matchedEmoteCode].id;\n      return `<img src=\"${FFZ_URL_PREFIX}/${emoteId}/2\" />`;\n    });\n  });\n\n  return result;\n};\n\nconst replaceEmotesWithImageTags = async (message, emotes) => {\n  let result = message;\n  result = replaceTwitchStandardEmotes(result, emotes);\n  result = await replaceBTTVGlobalEmotes(result);\n  result = await replaceBTTVChannelEmotes(result);\n  result = await replaceFFZChannelEmotes(result);\n  return result;\n};\n\nexport default replaceEmotesWithImageTags;\n","const PRONOUNS_URL_PREFIX = `https://pronouns.alejo.io/api`;\n\nlet pronounNames;\nlet userPronouns = {};\n\nconst fetchAllPronounNames = async () => {\n  if (pronounNames) return pronounNames;\n\n  const pronounsJSON = await fetch(`${PRONOUNS_URL_PREFIX}/pronouns`);\n  pronounNames = await pronounsJSON.json();\n\n  pronounNames = pronounNames.reduce((result, pronoun) => {\n    result[pronoun.name] = pronoun.display;\n    return result;\n  }, {});\n\n  return pronounNames;\n};\n\nconst fetchPronounsForUser = async (username) => {\n  if (!pronounNames) {\n    await fetchAllPronounNames();\n  }\n\n  const userPronounsJSON = await fetch(\n    `${PRONOUNS_URL_PREFIX}/users/${username}`\n  );\n  const userPronounsData = await userPronounsJSON.json();\n\n  const pronounId = userPronounsData?.[0]?.pronoun_id;\n\n  if (pronounId) {\n    userPronouns[username] = pronounNames[pronounId];\n  }\n\n  return userPronouns[username];\n};\n\nexport { fetchPronounsForUser };\n","import replaceEmotesWithImageTags from \"./emotes.js\";\nimport { fetchPronounsForUser } from \"./pronouns.js\";\n\nconst processMessage = async (tags, message) => {\n  const messageHTMLWithEmotesReplaced = await replaceEmotesWithImageTags(\n    message,\n    tags.emotes\n  );\n\n  const userPronouns = await fetchPronounsForUser(tags.username);\n\n  return {\n    messageHTML: messageHTMLWithEmotesReplaced,\n    pronounsText: userPronouns,\n    displayName: tags[\"display-name\"],\n    userColor: tags.color,\n  };\n};\n\nexport default processMessage;\n"],"names":["$a3176157567e61ca$export$2e2bcd8739ae039","string","TypeError","replace","$7728cba3f82061d3$var$userId","$7728cba3f82061d3$var$bttvGlobalLookupTable","$7728cba3f82061d3$var$bttvChannelLookupTable","$7728cba3f82061d3$var$ffzChannelLookupTable","async","$7728cba3f82061d3$var$getUserId","channelName","URLSearchParams","window","location","search","get","userIdResponse","fetch","text","$7728cba3f82061d3$export$2e2bcd8739ae039","bttvGlobalEmotesResponse","bttvGlobalEmotes","json","reduce","result","emote","emoteData","id","type","imageType","code","userId1","bttvChannelEmotesResponse","bttvChannelEmotesJSON","bttvChannelEmotes","channelEmotes","concat","sharedEmotes","userId2","ffzChannelEmotesResponse","ffzChannelEmotes","$e45cd4202acbd3f5$export$2e2bcd8739ae039","message","emotes","replacementMap","emoteId","occurenceIndices","Object","entries","startIndex","endIndex","split","slice","Number","emoteText","replacement","emotePattern","RegExp","replaceAll","$e45cd4202acbd3f5$var$replaceTwitchStandardEmotes","bttvGlobalLookupTable","getBttvGlobalLookupTable","bttvGlobalEmoteCodes","keys","every","emoteCode","includes","forEach","escapedEmoteCode","emoteRegexp","matchedEmoteCode","$e45cd4202acbd3f5$var$replaceBTTVGlobalEmotes","bttvChannelLookupTable","getBttvChannelLookupTable","bttvChannelEmoteCodes","$e45cd4202acbd3f5$var$replaceBTTVChannelEmotes","ffzChannelLookupTable","getFfzChannelLookupTable","ffzChannelEmoteCodes","$e45cd4202acbd3f5$var$replaceFFZChannelEmotes","$3863beff68b7be03$var$pronounNames","$3863beff68b7be03$var$userPronouns","$3863beff68b7be03$export$8d8ae72bca7669b1","username","pronounsJSON","pronoun","name","display","$3863beff68b7be03$var$fetchAllPronounNames","userPronounsJSON","pronounId","pronoun_id","$a40a7137780cfff5$export$2e2bcd8739ae039","tags","messageHTML","pronounsText","displayName","userColor","color"],"version":3,"file":"browser.js.map"}